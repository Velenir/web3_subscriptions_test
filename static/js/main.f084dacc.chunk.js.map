{"version":3,"sources":["components/DisplayComponents.tsx","components/LatestBlockPoll.tsx","components/LatestBlockSub.tsx","components/LogsSub.tsx","components/PendingTransactionsSub.tsx","components/SyncingSub.tsx","App.tsx","index.tsx"],"names":["DisplayClientVersion","provider","useState","clientVersion","setClientVersion","error","setError","useEffect","send","method","jsonrpc","params","e","useClientVersion","message","JSON","stringify","useAccounts","web3","accounts","setAccounts","eth","getAccounts","then","DisplayAccounts","id2Network","1","3","4","5","42","DisplayNetwork","network","setNetwork","net","getId","id","useNetwork","DisplayChainId","ChainId","setChainId","useChainId","DisplayBalance","balance","setBalance","account","getBalance","useBalance","useInterval","cb","interval","intervalId","setInterval","clearInterval","LatestBlockPoll","block","setBlock","getLatestBlock","useCallback","getBlock","bl","catch","useLatestBlockPoll","number","LatestBlockSub","setId","subscription","subscribe","result","console","log","on","subscriptionId","data","blockHeader","unsubscribe","useLatestBlockSub","LogsSub","logs","setLogs","useLogsSub","PendingTransactionsSub","pendingTransactions","setPendingTransactions","tx","oldTxs","concat","slice","usePendingTransactionsSub","SyncingSub","syncing","setSyncing","useSyncingSub","undefined","window","Web3","enableProvider","a","ethereum","Error","enable","ReloadButton","className","onClick","location","reload","App","setProvider","useProvider","ProviderError","input","useRef","useMemo","test","providers","WebsocketProvider","timeout","reconnect","auto","delay","maxAttempts","onTimeout","HttpProvider","web3c","useWeb3","Web3Error","key","setKey","type","placeholder","ref","current","value","oldKey","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.f084dacc.chunk.js","sourcesContent":["import React, { useState, useEffect, FC } from \"react\";\n\nimport Web3 from \"web3\";\nimport {\n  provider,\n  HttpProvider,\n  IpcProvider,\n  WebsocketProvider\n} from \"web3-core\";\n\ninterface ClientVersion {\n  id?: number;\n  jsonrpc?: string;\n  result: string;\n}\n\nconst useClientVersion = (provider: HttpProvider | IpcProvider | WebsocketProvider) => {\n  const [clientVersion, setClientVersion] = useState<ClientVersion | {}>({});\n  const [error, setError] = useState<Error | null>();\n\n  useEffect(() => {\n    provider.send(\n      {\n        method: \"web3_clientVersion\",\n        jsonrpc: \"2.0\",\n        params: []\n      },\n      (e, clientVersion) => {\n        if (e) {\n          setError(e);\n          setClientVersion({});\n          return;\n        }\n\n        if (!clientVersion) return\n\n        setClientVersion(clientVersion);\n        setError(null);\n      }\n    );\n  }, [provider]);\n\n  return { clientVersion, error };\n};\n\nexport const DisplayClientVersion: FC<{\n  provider: HttpProvider | IpcProvider | WebsocketProvider;\n}> = ({ provider }) => {\n  const { clientVersion, error } = useClientVersion(provider);\n\n  return (\n    <div>\n      {error && (\n        <pre>\n          Error getting client version [[{\" \"}\n          {error.message || JSON.stringify(error)} ]]\n        </pre>\n      )}\n      {clientVersion && (\n        <pre>ClientVersion: {JSON.stringify(clientVersion, null, 1)}</pre>\n      )}\n    </div>\n  );\n};\n\nconst useAccounts = (web3: Web3) => {\n  const [accounts, setAccounts] = useState<string[]>([]);\n\n  useEffect(() => {\n    web3.eth.getAccounts().then(setAccounts);\n  }, [web3]);\n\n  return accounts;\n};\n\nexport const DisplayAccounts: FC<{ web3: Web3 }> = ({ web3 }) => {\n  const accounts = useAccounts(web3);\n\n  return <p>Accounts: {accounts}</p>;\n};\n\ntype Network = \"mainnet\" | \"ropsten\" | \"rinkeby\" | \"goerli\" | \"kovan\";\n\nconst id2Network: { [K: number]: Network } = {\n  1: \"mainnet\",\n  3: \"ropsten\",\n  4: \"rinkeby\",\n  5: \"goerli\",\n  42: \"kovan\"\n};\n\nconst useNetwork = (web3: Web3) => {\n  const [network, setNetwork] = useState<Network>();\n\n  useEffect(() => {\n    web3.eth.net.getId().then(id => setNetwork(id2Network[id]));\n  }, [web3]);\n\n  return network;\n};\n\nexport const DisplayNetwork: FC<{ web3: Web3 }> = ({ web3 }) => {\n  const network = useNetwork(web3);\n\n  return <p>Network: {network}</p>;\n};\n\nconst useChainId = (web3: Web3) => {\n  const [ChainId, setChainId] = useState<number>();\n\n  useEffect(() => {\n    web3.eth.net.getId().then(setChainId);\n  }, [web3]);\n\n  return ChainId;\n};\n\nexport const DisplayChainId: FC<{ web3: Web3 }> = ({ web3 }) => {\n  const ChainId = useChainId(web3);\n\n  return <p>ChainId: {ChainId}</p>;\n};\n\nconst useBalance = (web3: Web3) => {\n  const [balance, setBalance] = useState(\"\");\n  const [account] = useAccounts(web3);\n\n  useEffect(() => {\n    account && web3.eth.getBalance(account).then(setBalance);\n  }, [web3, account]);\n\n  return balance;\n};\n\nexport const DisplayBalance: FC<{ web3: Web3 }> = ({ web3 }) => {\n  const balance = useBalance(web3);\n\n  return <p>Balance: {+balance / 1e18} ETH</p>;\n};\n","import React, { useState, useEffect, useCallback, FC } from \"react\";\n\nimport Web3 from \"web3\";\nimport { BlockHeader } from \"web3-eth\";\n\nconst useInterval = (cb: Function, interval: number) => {\n  useEffect(() => {\n    cb();\n    const intervalId = setInterval(cb, interval);\n    return () => clearInterval(intervalId);\n  }, [cb, interval]);\n};\n\nconst useLatestBlockPoll = (web3: Web3, interval = 8000) => {\n  const [block, setBlock] = useState<BlockHeader>();\n  const [error, setError] = useState<Error | null>(null);\n\n  const getLatestBlock = useCallback(\n    () =>\n      web3.eth\n        .getBlock(\"latest\")\n        .then(bl => {\n          setBlock(bl);\n          setError(null);\n        })\n        .catch(setError),\n    [web3]\n  );\n\n  useInterval(getLatestBlock, interval);\n\n  return {\n    block,\n    error\n  };\n};\n\nconst LatestBlockPoll: FC<{ web3: Web3; interval: number }> = ({\n  web3,\n  interval\n}) => {\n  const { block, error } = useLatestBlockPoll(web3, interval);\n\n  return (\n    <div>\n      <h3>Polling Latest Block every {interval / 1000} sec</h3>\n      {block && <h4>Current block: {block.number}</h4>}\n      {error && (\n        <pre>\n          Error getting client version [[{\" \"}\n          {error.message || JSON.stringify(error)} ]]\n        </pre>\n      )}\n      {block && <pre>Block: {JSON.stringify(block, null, 1)}</pre>}\n    </div>\n  );\n};\n\nexport default LatestBlockPoll;\n","import React, { useState, useEffect, FC } from \"react\";\n\nimport Web3 from \"web3\";\nimport { BlockHeader } from \"web3-eth\";\n\nconst useLatestBlockSub = (web3: Web3) => {\n  const [block, setBlock] = useState<BlockHeader>();\n  const [id, setId] = useState<string>(\"\");\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const subscription = web3.eth\n      .subscribe(\"newBlockHeaders\", function (error, result) {\n        if (!error) {\n          console.log(\"CB:newBlockHeaders:result\", result);\n          return;\n        }\n\n        console.error(\"CB:newBlockHeaders:error\", error);\n        setError(error);\n      })\n      .on(\"connected\", function (subscriptionId) {\n        console.log(\"connected:newBlockHeaders:id\", subscriptionId);\n        setId(subscriptionId);\n      })\n      .on(\"changed\", function (data) {\n        console.log(\"changed:newBlockHeaders:id\", data);\n      })\n      .on(\"data\", function (blockHeader) {\n        console.log(\"data:newBlockHeaders:blockHeader\", blockHeader);\n        setBlock(blockHeader);\n        setError(null);\n      })\n      .on(\"error\", error => {\n        console.error(\"error:newBlockHeaders\", error);\n        setError(error);\n      });\n\n    return () => { subscription.unsubscribe(); }\n  }, [web3]);\n\n  return {\n    block,\n    error,\n    subscriptionId: id\n  };\n};\n\nconst LatestBlockSub: FC<{ web3: Web3 }> = ({ web3 }) => {\n  const { block, error, subscriptionId } = useLatestBlockSub(web3);\n\n  return (\n    <div>\n      <h3>Subscribed to newBlockHeaders, id: {subscriptionId}</h3>\n      {block && <h4>Current block: {block.number}</h4>}\n      {error && (\n        <pre>\n          Error subscribing to newBlockHeaders [[{\" \"}\n          {error.message || JSON.stringify(error)} ]]\n        </pre>\n      )}\n      {block && <pre>Block Header:: {JSON.stringify(block, null, 1)}</pre>}\n    </div>\n  );\n};\n\nexport default LatestBlockSub;\n","import React, { useState, useEffect, FC } from \"react\";\n\nimport Web3 from \"web3\";\nimport { Log } from \"web3-core\";\n\nconst useLogsSub = (web3: Web3) => {\n  const [logs, setLogs] = useState<Log | {}>({});\n  const [id, setId] = useState<string>(\"\");\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const subscription = web3.eth\n      .subscribe(\"logs\", {}, function (error, result) {\n        if (!error) {\n          console.log(\"CB:logs:result\", result);\n          return;\n        }\n\n        console.error(\"CB:logs:error\", error);\n        setError(error);\n      })\n      .on(\"connected\", function (subscriptionId) {\n        console.log(\"connected:logs:id\", subscriptionId);\n        setId(subscriptionId);\n      })\n      .on(\"changed\", function (data) {\n        console.log(\"changed:logs:id\", data);\n      })\n      .on(\"data\", function (blockHeader) {\n        console.log(\"data:logs:blockHeader\", blockHeader);\n        setLogs(blockHeader);\n        setError(null);\n      })\n      .on(\"error\", error => {\n        console.error(\"error:logs\", error);\n        setError(error);\n      });\n\n    return () => { subscription.unsubscribe(); }\n  }, [web3]);\n\n  return {\n    logs,\n    error,\n    subscriptionId: id\n  };\n};\n\nconst LogsSub: FC<{ web3: Web3 }> = ({ web3 }) => {\n  const { logs, error, subscriptionId } = useLogsSub(web3);\n\n  return (\n    <div>\n      <h3>Subscribed to logs, id: {subscriptionId}</h3>\n      {error && (\n        <pre>\n          Error subscribing to logs [[ {error.message || JSON.stringify(error)}{\" \"}\n          ]]\n        </pre>\n      )}\n      {logs && <pre>Latest Log:: {JSON.stringify(logs, null, 1)}</pre>}\n    </div>\n  );\n};\n\nexport default LogsSub;\n","import React, { useState, useEffect, FC } from \"react\";\n\nimport Web3 from \"web3\";\n\nconst MAX_TSX_TO_DISPLAY = 10\n\nconst usePendingTransactionsSub = (web3: Web3) => {\n  const [pendingTransactions, setPendingTransactions] = useState<string[]>([]);\n  const [id, setId] = useState<string>(\"\");\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const subscription = web3.eth\n      .subscribe(\"pendingTransactions\", function(error, result) {\n        if (!error) {\n          console.log(\"CB:pendingTransactions:result\", result);\n          return;\n        }\n\n        console.error(\"CB:pendingTransactions:error\", error);\n        setError(error);\n      })\n      .on(\"connected\", function(subscriptionId) {\n        console.log(\"connected:pendingTransactions:id\", subscriptionId);\n        setId(subscriptionId);\n      })\n      .on(\"changed\", function(data) {\n        console.log(\"changed:pendingTransactions:id\", data);\n      })\n      .on(\"data\", function(tx) {\n        console.log(\"data:pendingTransactions:tx\", tx);\n        setPendingTransactions(oldTxs => oldTxs.concat(tx).slice(-MAX_TSX_TO_DISPLAY));\n        setError(null);\n      })\n      .on(\"error\", error => {\n        console.error(\"error:pendingTransactions\", error);\n        setError(error);\n      });\n\n    return () => {subscription.unsubscribe();}\n  }, [web3]);\n\n  return {\n    pendingTransactions,\n    error,\n    subscriptionId: id\n  };\n};\n\nconst PendingTransactionsSub: FC<{ web3: Web3 }> = ({ web3 }) => {\n  const {\n    pendingTransactions,\n    error,\n    subscriptionId\n  } = usePendingTransactionsSub(web3);\n\n  return (\n    <div>\n      <h3>Subscribed to pendingTransactions, id: {subscriptionId}</h3>\n      {error && (\n        <pre>\n          Error subscribing to pendingTransactions [[{\" \"}\n          {error.message || JSON.stringify(error)} ]]\n        </pre>\n      )}\n      {pendingTransactions && (\n        <pre>\n          Pending Transactions:: {JSON.stringify(pendingTransactions, null, 1)}\n        </pre>\n      )}\n    </div>\n  );\n};\n\nexport default PendingTransactionsSub;\n","import React, { useState, useEffect, FC } from \"react\";\n\nimport Web3 from \"web3\";\nimport { Syncing } from \"web3-eth\";\n\nconst useSyncingSub = (web3: Web3) => {\n  const [syncing, setSyncing] = useState<Syncing>();\n  const [id, setId] = useState<string>(\"\");\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const subscription = web3.eth\n      .subscribe(\"syncing\", function (error, result) {\n        if (!error) {\n          console.log(\"CB:syncing:result\", result);\n\n          return;\n        }\n\n        console.error(\"CB:syncing:error\", error);\n        setError(error);\n      })\n      .on(\"connected\", function (subscriptionId) {\n        console.log(\"connected:syncing:id\", subscriptionId);\n        setId(subscriptionId);\n      })\n      .on(\"changed\", function (data) {\n        console.log(\"changed:syncing:id\", data);\n      })\n      .on(\"data\", function (blockHeader) {\n        console.log(\"data:syncing:blockHeader\", blockHeader);\n        setSyncing(blockHeader);\n        setError(null);\n      })\n      .on(\"error\", error => {\n        console.error(\"error:syncing\", error);\n        setError(error);\n      });\n\n    return () => { subscription.unsubscribe(); }\n  }, [web3]);\n\n  return {\n    syncing,\n    error,\n    subscriptionId: id\n  };\n};\n\nconst SyncingSub: FC<{ web3: Web3 }> = ({ web3 }) => {\n  const { syncing, error, subscriptionId } = useSyncingSub(web3);\n\n  return (\n    <div>\n      <h3>Subscribed to syncing, id: {subscriptionId}</h3>\n      {error && (\n        <pre>\n          Error subscribing to syncing [[{\" \"}\n          {error.message || JSON.stringify(error)} ]]\n        </pre>\n      )}\n      {syncing !== undefined && (\n        <pre>Logs:: {JSON.stringify(syncing, null, 1)}</pre>\n      )}\n    </div>\n  );\n};\n\nexport default SyncingSub;\n","import React, { useState, useMemo, useRef, FC } from \"react\";\nimport \"./styles.css\";\n\nimport Web3 from \"web3\";\nimport { provider as Web3Provider, AbstractProvider } from \"web3-core\";\n\nimport {\n  DisplayAccounts,\n  DisplayClientVersion,\n  DisplayNetwork,\n  DisplayChainId,\n  DisplayBalance\n} from \"./components/DisplayComponents\";\nimport LatestBlockPoll from \"./components/LatestBlockPoll\";\nimport LatestBlockSub from \"./components/LatestBlockSub\";\nimport LogsSub from \"./components/LogsSub\";\nimport PendingTransactionsSub from \"./components/PendingTransactionsSub\";\nimport SyncingSub from \"./components/SyncingSub\";\n\ntype Provider = Exclude<Web3Provider, AbstractProvider | null>\nwindow.Web3 = Web3;\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n    provider: any;\n    web3: any;\n    web3c: any;\n    Web3: any;\n  }\n}\n\nconst enableProvider = async (): Promise<Provider> => {\n  if (!window.ethereum)\n    throw new Error(\"No provider available on window.ethereum\");\n\n  const accounts = await window.ethereum.enable();\n  console.log(\"accounts:\", accounts);\n\n  return window.ethereum;\n};\n\nconst useProvider = () => {\n  const [provider, setProvider] = useState<Provider | null>(null);\n  const [error, setError] = useState<Error | null>();\n\n  window.provider = provider;\n\n  return {\n    provider,\n    setProvider,\n    enableProvider: async () => {\n      try {\n        const provider = await enableProvider();\n\n        setProvider(provider);\n        setError(null);\n      } catch (error) {\n        setError(error);\n        setProvider(null);\n      }\n    },\n    error\n  };\n};\n\nconst useWeb3 = (provider: Provider | null): { web3: null | Web3; error: Error | null } => {\n  return useMemo(() => {\n    if (!provider) return { web3: null, error: null };\n\n    if (typeof provider === \"string\") {\n      /* eslint-disable-next-line react-hooks/exhaustive-deps */\n      provider = /^wss?:\\/\\/.*/.test(provider)\n        ? new Web3.providers.WebsocketProvider(provider, {\n            timeout: 15000, // ms\n            // Enable auto reconnection\n            reconnect: {\n              auto: true,\n              delay: 5000, // ms\n              maxAttempts: undefined,\n              onTimeout: true\n            }\n          })\n        : new Web3.providers.HttpProvider(provider);\n    }\n\n    window.provider = provider;\n\n    try {\n      const web3 = (window.web3c = new Web3(provider));\n      return { web3, error: null };\n    } catch (error) {\n      return { web3: null, error };\n    }\n  }, [provider]);\n};\n\nconst ReloadButton: FC = () => {\n  return (\n    <div className=\"reload\">\n      <button onClick={() => window.location.reload()}>↻</button>\n    </div>\n  );\n};\n\nexport default function App() {\n  const {\n    provider,\n    setProvider,\n    error: ProviderError,\n    enableProvider\n  } = useProvider();\n\n  const input = useRef<HTMLInputElement>(null);\n\n  const connectProvider = () => {\n    if (input.current?.value) setProvider(input.current.value);\n  };\n\n  const { web3, error: Web3Error } = useWeb3(provider);\n\n  const resetProvider = () => setProvider(null);\n\n  let [key, setKey] = useState(0);\n  const resetChildren = () => setKey((oldKey) => oldKey + 1);\n\n  return (\n    <div className=\"App\">\n      {!provider && (\n        <>\n          <button onClick={enableProvider}>connect to injected provider</button>\n          {\" | or | \"}\n          <input type=\"text\" placeholder=\"input provider url\" ref={input} />\n          <button onClick={connectProvider}>connect</button>\n        </>\n      )}\n      {provider && <button onClick={resetProvider}>reset</button>}\n      {provider && <button onClick={resetChildren}>reset subs</button>}\n      {ProviderError && (\n        <pre>\n          Error enabling provider: {JSON.stringify(ProviderError, null, 1)}\n        </pre>\n      )}\n      {Web3Error && (\n        <pre>\n          Error instantiating Web3: {JSON.stringify(Web3Error, null, 1)}\n        </pre>\n      )}\n      {web3 && (\n        <>\n          <DisplayAccounts web3={web3} key={key+'DA'} />\n          <DisplayNetwork web3={web3} key={key+'DN'} />\n          <DisplayChainId web3={web3} key={key+'DC'} />\n          <DisplayBalance web3={web3} key={key+'DB'} />\n          <hr />\n          {provider && typeof provider !== \"string\" && (\n            <DisplayClientVersion provider={provider} key={key+'DCV'} />\n          )}\n          <hr />\n          <LatestBlockSub web3={web3} key={key+'LBS'} />\n          <hr />\n          <LatestBlockPoll web3={web3} interval={8000} key={key+'LBP'} />\n          <hr />\n          <LogsSub web3={web3} key={key+'LS'} />\n          <hr />\n          <PendingTransactionsSub web3={web3} key={key+'PTS'} />\n          <hr />\n          <SyncingSub web3={web3} key={key+'SS'} />\n          <hr />\n        </>\n      )}\n      <ReloadButton />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}